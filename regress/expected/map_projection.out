/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
LOAD 'age';
SET search_path TO ag_catalog;
SELECT create_graph('map_proj');
NOTICE:  graph "map_proj" has been created
 create_graph 
--------------
 
(1 row)

SELECT * FROM cypher('map_proj',
$$
    CREATE
        (tom:Actor {name:'Tom Hanks', age:60}),
        (bale:Actor {name:'Christian Bale', age:50}),
        (tom)-[:ACTED_IN {during: 1990}]->(:Movie {title:'Forrest Gump'}),
        (tom)-[:ACTED_IN {during: 1995}]->(:Movie {title:'Finch'}),
        (tom)-[:ACTED_IN {during: 1999}]->(:Movie {title:'The Circle'}),
        (bale)-[:ACTED_IN {during: 2002}]->(:Movie {title:'The Prestige'}),
        (bale)-[:ACTED_IN {during: 2008}]->(:Movie {title:'The Dark Knight'})
$$) as (a agtype);
 a 
---
(0 rows)

-- all property selection
SELECT * FROM cypher('map_proj', $$ WITH {name:'Bob', age:50} AS map RETURN map { .* } $$) as (a agtype);
             a              
----------------------------
 {"age": 50, "name": "Bob"}
(1 row)

-- property selector
SELECT * FROM cypher('map_proj', $$ WITH {name:'Bob', age:50} AS map RETURN map { .name } $$) as (a agtype);
        a        
-----------------
 {"name": "Bob"}
(1 row)

-- literal entry
SELECT * FROM cypher('map_proj', $$ WITH {name:'Bob', age:50} AS map RETURN map { name:'Tom' } $$) as (a agtype);
        a        
-----------------
 {"name": "Tom"}
(1 row)

-- variable selector
SELECT * FROM cypher('map_proj', $$ WITH {name:'Bob', age:50} AS map, 'Tom' as name RETURN map { name } $$) as (a agtype);
        a        
-----------------
 {"name": "Tom"}
(1 row)

-- duplicate all property selector
SELECT * FROM cypher('map_proj', $$ WITH {name:'Bob', age:50} AS map RETURN map { .*, .* } $$) as (a agtype);
             a              
----------------------------
 {"age": 50, "name": "Bob"}
(1 row)

-- name being selected twice
SELECT * FROM cypher('map_proj', $$ WITH {name:'Bob', age:50} AS map RETURN map { .name, .* } $$) as (a agtype);
             a              
----------------------------
 {"age": 50, "name": "Bob"}
(1 row)

SELECT * FROM cypher('map_proj', $$ WITH {name:'Bob', age:50} AS map RETURN map { .name, .name } $$) as (a agtype);
        a        
-----------------
 {"name": "Bob"}
(1 row)

-- name being selected twice with different value
SELECT * FROM cypher('map_proj', $$ WITH {name:'Bob', age:50} AS map RETURN map { name:'Tom', .* } $$) as (a agtype);
             a              
----------------------------
 {"age": 50, "name": "Tom"}
(1 row)

SELECT * FROM cypher('map_proj', $$ WITH {name:'Bob', age:50} AS map, 'Tom' as name RETURN map { name, .* } $$) as (a agtype);
             a              
----------------------------
 {"age": 50, "name": "Tom"}
(1 row)

-- new entry added
SELECT * FROM cypher('map_proj', $$ WITH {name:'Bob', age:50} AS map RETURN map { .name, .age, height:180 } $$) as (a agtype);
                     a                     
-------------------------------------------
 {"age": 50, "name": "Bob", "height": 180}
(1 row)

-- NULL as a map
SELECT * FROM cypher('map_proj', $$ WITH NULL AS map RETURN map { .name } $$) as (a agtype);
 a  
----
 {}
(1 row)

-- vertex as a map
SELECT * FROM cypher('map_proj', $$ MATCH (n:Actor) RETURN n { .name } $$) as (a agtype);
             a              
----------------------------
 {"name": "Tom Hanks"}
 {"name": "Christian Bale"}
(2 rows)

-- edge as a map
SELECT * FROM cypher('map_proj', $$ MATCH ()-[e:ACTED_IN]->() RETURN e { .during } $$) as (a agtype);
        a         
------------------
 {"during": 1990}
 {"during": 1995}
 {"during": 1999}
 {"during": 2002}
 {"during": 2008}
(5 rows)

-- syntax error
SELECT * FROM cypher('map_proj', $$ WITH 12 AS map RETURN map { .name } $$) as (a agtype);
ERROR:  properties() argument must be a vertex, an edge or null
SELECT * FROM cypher('map_proj', $$ WITH [] AS map RETURN map { .name } $$) as (a agtype);
ERROR:  properties() argument must resolve to an object
SELECT * FROM cypher('map_proj', $$ WITH {name:'Bob'} AS map RETURN map { 'name' } $$) as (a agtype);
ERROR:  syntax error at or near "'name'"
LINE 1: ...p_proj', $$ WITH {name:'Bob'} AS map RETURN map { 'name' } $...
                                                             ^
-- advanced
SELECT * FROM cypher('map_proj',
$$
    MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
    WITH a, collect(m { .title }) AS movies
    RETURN collect(a { .name, movies })
$$) as (a agtype);
                                                                                                      a                                                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 [{"name": "Tom Hanks", "movies": [{"title": "Forrest Gump"}, {"title": "Finch"}, {"title": "The Circle"}]}, {"name": "Christian Bale", "movies": [{"title": "The Prestige"}, {"title": "The Dark Knight"}]}]
(1 row)

-- drop
SELECT drop_graph('map_proj', true);
NOTICE:  drop cascades to 5 other objects
DETAIL:  drop cascades to table map_proj._ag_label_vertex
drop cascades to table map_proj._ag_label_edge
drop cascades to table map_proj."Actor"
drop cascades to table map_proj."ACTED_IN"
drop cascades to table map_proj."Movie"
NOTICE:  graph "map_proj" has been dropped
 drop_graph 
------------
 
(1 row)

